// import 'dart:async';

// import 'package:amazon_sqlite/database.dart';
// import 'package:amazon_sqlite/model.dart';
// import 'package:amazon_sqlite/bloc_provider.dart';
// import 'main.dart';

// DatabaseHelper helper = DatabaseHelper();
// bool rebuildState = false;

// class NotesBloc {
//   // Create a broadcast controller that allows this stream to be listened
//   // to multiple times. This is the primary, if not only, type of stream you'll be using.
//   final StreamController<List<Product>> _productsController =
//       StreamController<List<Product>>.broadcast();

//   // Input stream. We add our products to the stream using this variable.
//   StreamSink<List<Product>> get _inProducts => _productsController.sink;

//   // Output stream. This one will be used within our pages to display the products.
//   Stream<List<Product>> get products => _productsController.stream;

//   // Input stream for adding new products. We'll call this from our pages.
//   final _addProductController = StreamController<Product>.broadcast();
//   StreamSink<Product> get inAddProduct => _addProductController.sink;

//   // Input stream for adding new products. We'll call this from our pages.
//   final _updateProductController = StreamController<Product>.broadcast();
//   StreamSink<Product> get inUpdateProduct => _updateProductController.sink;

//   NotesBloc() {
//     // Retrieve all the products on initialization
//     getProducts();

//     // Listens for changes to the addProductController and calls _handleAddProduct on change
//     _addProductController.stream.listen(_handleAddProduct);
//     _updateProductController.stream.listen(_handleUpdateProduct);
//   }

// // All stream controllers you create should be closed within this function
//   void dispose() {
//     print('=============disposed===============');
//     _productsController.close();
//     _addProductController.close();
//     _updateProductController.close();
//   }

//   void getProducts() async {
//     // Retrieve all the products from the database
//     List<Product> products = await helper.getProductList();

//     // Add all of the products to the stream so we can grab them later from our pages
//     _inProducts.add(products);
//   }

//   handleAddUpdateProductCall(Product product, String type) {
//     print('==============================');
//     print('add/updateStreamCall');
//     print('==============================');
//     if (type == 'insertASIN')
//       _handleAddProduct(product);
//     else if (type == 'updateASIN') _handleUpdateProduct(product);
//   }

//   void _handleAddProduct(Product product) async {
//     var result;
//     // Create the product in the database
//     result = helper.insertProduct(product).then((_) {
//       getProducts();
//       print('getProducts called');
//       updateSetState();
//     });
//     // print('insertCompleted');

//     if (result != 0) {
//       // TODO - implement insert SUCCESS
//       print('insert SUCCESS');
//     } else {
//       //TODO - implement insert FAIL
//       print('insert FAIL');
//     }

//     // Retrieve all the products again after one is added.
//     // This allows our pages to update properly and display the
//     // newly added product.
//     // getProducts();
//   }

//   void _handleUpdateProduct(Product product) async {
//     var result;
//     // Update the product in the database
//     result = await helper.updateProduct(product);

//     if (result != 0) {
//       // TODO - implement insert SUCCESS
//       print('update SUCCESS');
//     } else {
//       //TODO - implement insert FAIL
//       print('update FAIL');
//     }

//     // Retrieve all the products again after one is added.
//     // This allows our pages to update properly and display the
//     // newly added product.
//     getProducts();
//     return result;
//   }
// }
